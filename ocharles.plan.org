#+TITLE: Zero to Quake 3

Trying to build as much of Quake 3 as I can using Haskell & Vulkan.

* Wednesday
** [X] Introduce model/view/projection matrix via a uniform buffer :progress:

** [ ] Make use of the depth buffer :progress:

** [ ] Use an index buffer :progress:

** [ ] Add texturing :progress:

** [ ] Determine the presentation queue :correctness:

** [ ] Check for VK_KHR_SWAPCHAIN_EXTENSION_NAME :correctness:

** [ ] Triple buffering :correctness:

** [ ] Frame fences to limit in flight frames :correctness:

** [ ] Check that VK_KHR_swapchain is supported :correctness:

** [ ] Use cabal2nix to generate Nix environment :refactoring:

** [ ] Factor out the pattern of setting a list and the length at once :correctness:

** [ ] Form a module structure :refactoring:

** [ ] Move logging from main to functions themselves :refactoring:


* Sunday
** [X] Find out how to correctly use vulkan-loader :correctness:

It currently requires me to change =LD_LIBRARY_PATH= to contain
vulkan-loader.so.

** [X] Use vertex buffers


* Friday
** [X] A DSL for building Vulkan structs :refactoring:

** [X] Resource cleanup :correctness:

** [X] Render a triangle! :progress:


* Thursday
** [X] Finish recording a render pass to the command buffer

** [X] Add the validation layer :correctness:

** [X] Submit the command buffer for rendering

** [X] We have a blue screen!


* Tuesday
** [X] Build a render pass :progress:
